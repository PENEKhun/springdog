plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "java-library"
    id 'jacoco-report-aggregation'
}

group = rootPackageName
version = springDogVersion
apply from: "lint.gradle"

allprojects {
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenCentral()
    }

    apply plugin: "java-library"
    apply plugin: "jacoco"

    dependencies {
        compileOnly "org.springframework.boot:spring-boot-starter-web:${springbootVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testImplementation "org.apache.cayenne:cayenne-server:${cayenneVersion}"
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.required.set(true)
            html.required.set(true)
        }
    }
}

dependencies {
    jacocoAggregation subprojects
}

tasks.register('jacocoRootReport', JacocoReport) {
    dependsOn subprojects.test

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    additionalClassDirs = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.named('jacocoTestReport') {
    dependsOn jacocoRootReport
}
