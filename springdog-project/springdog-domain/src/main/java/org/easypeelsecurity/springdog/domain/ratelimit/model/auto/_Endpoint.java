package org.easypeelsecurity.springdog.domain.ratelimit.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.easypeelsecurity.springdog.domain.ratelimit.model.EndpointParameter;
import org.easypeelsecurity.springdog.domain.statistics.model.EndpointMetric;

/**
 * Class _Endpoint was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Endpoint extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> HTTP_METHOD = PropertyFactory.createString("httpMethod", String.class);
    public static final NumericProperty<Long> ID = PropertyFactory.createNumeric("id", Long.class);
    public static final BaseProperty<Boolean> IS_PATTERN_PATH = PropertyFactory.createBase("isPatternPath", Boolean.class);
    public static final StringProperty<String> METHOD_SIGNATURE = PropertyFactory.createString("methodSignature", String.class);
    public static final StringProperty<String> PATH = PropertyFactory.createString("path", String.class);
    public static final NumericProperty<Integer> RULE_BAN_TIME_IN_SECONDS = PropertyFactory.createNumeric("ruleBanTimeInSeconds", Integer.class);
    public static final BaseProperty<Boolean> RULE_IP_BASED = PropertyFactory.createBase("ruleIpBased", Boolean.class);
    public static final BaseProperty<Boolean> RULE_PERMANENT_BAN = PropertyFactory.createBase("rulePermanentBan", Boolean.class);
    public static final NumericProperty<Integer> RULE_REQUEST_LIMIT_COUNT = PropertyFactory.createNumeric("ruleRequestLimitCount", Integer.class);
    public static final StringProperty<String> RULE_STATUS = PropertyFactory.createString("ruleStatus", String.class);
    public static final NumericProperty<Integer> RULE_TIME_LIMIT_IN_SECONDS = PropertyFactory.createNumeric("ruleTimeLimitInSeconds", Integer.class);
    public static final ListProperty<EndpointMetric> ENDPOINT_METRICS = PropertyFactory.createList("endpointMetrics", EndpointMetric.class);
    public static final ListProperty<EndpointParameter> ENDPOINT_PARAMETERS = PropertyFactory.createList("endpointParameters", EndpointParameter.class);

    protected String httpMethod;
    protected long id;
    protected boolean isPatternPath;
    protected String methodSignature;
    protected String path;
    protected int ruleBanTimeInSeconds;
    protected boolean ruleIpBased;
    protected boolean rulePermanentBan;
    protected int ruleRequestLimitCount;
    protected String ruleStatus;
    protected int ruleTimeLimitInSeconds;

    protected Object endpointMetrics;
    protected Object endpointParameters;

    public void setHttpMethod(String httpMethod) {
        beforePropertyWrite("httpMethod", this.httpMethod, httpMethod);
        this.httpMethod = httpMethod;
    }

    public String getHttpMethod() {
        beforePropertyRead("httpMethod");
        return this.httpMethod;
    }

    public void setId(long id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public long getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setIsPatternPath(boolean isPatternPath) {
        beforePropertyWrite("isPatternPath", this.isPatternPath, isPatternPath);
        this.isPatternPath = isPatternPath;
    }

	public boolean isIsPatternPath() {
        beforePropertyRead("isPatternPath");
        return this.isPatternPath;
    }

    public void setMethodSignature(String methodSignature) {
        beforePropertyWrite("methodSignature", this.methodSignature, methodSignature);
        this.methodSignature = methodSignature;
    }

    public String getMethodSignature() {
        beforePropertyRead("methodSignature");
        return this.methodSignature;
    }

    public void setPath(String path) {
        beforePropertyWrite("path", this.path, path);
        this.path = path;
    }

    public String getPath() {
        beforePropertyRead("path");
        return this.path;
    }

    public void setRuleBanTimeInSeconds(int ruleBanTimeInSeconds) {
        beforePropertyWrite("ruleBanTimeInSeconds", this.ruleBanTimeInSeconds, ruleBanTimeInSeconds);
        this.ruleBanTimeInSeconds = ruleBanTimeInSeconds;
    }

    public int getRuleBanTimeInSeconds() {
        beforePropertyRead("ruleBanTimeInSeconds");
        return this.ruleBanTimeInSeconds;
    }

    public void setRuleIpBased(boolean ruleIpBased) {
        beforePropertyWrite("ruleIpBased", this.ruleIpBased, ruleIpBased);
        this.ruleIpBased = ruleIpBased;
    }

	public boolean isRuleIpBased() {
        beforePropertyRead("ruleIpBased");
        return this.ruleIpBased;
    }

    public void setRulePermanentBan(boolean rulePermanentBan) {
        beforePropertyWrite("rulePermanentBan", this.rulePermanentBan, rulePermanentBan);
        this.rulePermanentBan = rulePermanentBan;
    }

	public boolean isRulePermanentBan() {
        beforePropertyRead("rulePermanentBan");
        return this.rulePermanentBan;
    }

    public void setRuleRequestLimitCount(int ruleRequestLimitCount) {
        beforePropertyWrite("ruleRequestLimitCount", this.ruleRequestLimitCount, ruleRequestLimitCount);
        this.ruleRequestLimitCount = ruleRequestLimitCount;
    }

    public int getRuleRequestLimitCount() {
        beforePropertyRead("ruleRequestLimitCount");
        return this.ruleRequestLimitCount;
    }

    public void setRuleStatus(String ruleStatus) {
        beforePropertyWrite("ruleStatus", this.ruleStatus, ruleStatus);
        this.ruleStatus = ruleStatus;
    }

    public String getRuleStatus() {
        beforePropertyRead("ruleStatus");
        return this.ruleStatus;
    }

    public void setRuleTimeLimitInSeconds(int ruleTimeLimitInSeconds) {
        beforePropertyWrite("ruleTimeLimitInSeconds", this.ruleTimeLimitInSeconds, ruleTimeLimitInSeconds);
        this.ruleTimeLimitInSeconds = ruleTimeLimitInSeconds;
    }

    public int getRuleTimeLimitInSeconds() {
        beforePropertyRead("ruleTimeLimitInSeconds");
        return this.ruleTimeLimitInSeconds;
    }

    public void addToEndpointMetrics(EndpointMetric obj) {
        addToManyTarget("endpointMetrics", obj, true);
    }

    public void removeFromEndpointMetrics(EndpointMetric obj) {
        removeToManyTarget("endpointMetrics", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<EndpointMetric> getEndpointMetrics() {
        return (List<EndpointMetric>)readProperty("endpointMetrics");
    }

    public void addToEndpointParameters(EndpointParameter obj) {
        addToManyTarget("endpointParameters", obj, true);
    }

    public void removeFromEndpointParameters(EndpointParameter obj) {
        removeToManyTarget("endpointParameters", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<EndpointParameter> getEndpointParameters() {
        return (List<EndpointParameter>)readProperty("endpointParameters");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "httpMethod":
                return this.httpMethod;
            case "id":
                return this.id;
            case "isPatternPath":
                return this.isPatternPath;
            case "methodSignature":
                return this.methodSignature;
            case "path":
                return this.path;
            case "ruleBanTimeInSeconds":
                return this.ruleBanTimeInSeconds;
            case "ruleIpBased":
                return this.ruleIpBased;
            case "rulePermanentBan":
                return this.rulePermanentBan;
            case "ruleRequestLimitCount":
                return this.ruleRequestLimitCount;
            case "ruleStatus":
                return this.ruleStatus;
            case "ruleTimeLimitInSeconds":
                return this.ruleTimeLimitInSeconds;
            case "endpointMetrics":
                return this.endpointMetrics;
            case "endpointParameters":
                return this.endpointParameters;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "httpMethod":
                this.httpMethod = (String)val;
                break;
            case "id":
                this.id = val == null ? 0 : (long)val;
                break;
            case "isPatternPath":
                this.isPatternPath = val == null ? false : (boolean)val;
                break;
            case "methodSignature":
                this.methodSignature = (String)val;
                break;
            case "path":
                this.path = (String)val;
                break;
            case "ruleBanTimeInSeconds":
                this.ruleBanTimeInSeconds = val == null ? 0 : (int)val;
                break;
            case "ruleIpBased":
                this.ruleIpBased = val == null ? false : (boolean)val;
                break;
            case "rulePermanentBan":
                this.rulePermanentBan = val == null ? false : (boolean)val;
                break;
            case "ruleRequestLimitCount":
                this.ruleRequestLimitCount = val == null ? 0 : (int)val;
                break;
            case "ruleStatus":
                this.ruleStatus = (String)val;
                break;
            case "ruleTimeLimitInSeconds":
                this.ruleTimeLimitInSeconds = val == null ? 0 : (int)val;
                break;
            case "endpointMetrics":
                this.endpointMetrics = val;
                break;
            case "endpointParameters":
                this.endpointParameters = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.httpMethod);
        out.writeLong(this.id);
        out.writeBoolean(this.isPatternPath);
        out.writeObject(this.methodSignature);
        out.writeObject(this.path);
        out.writeInt(this.ruleBanTimeInSeconds);
        out.writeBoolean(this.ruleIpBased);
        out.writeBoolean(this.rulePermanentBan);
        out.writeInt(this.ruleRequestLimitCount);
        out.writeObject(this.ruleStatus);
        out.writeInt(this.ruleTimeLimitInSeconds);
        out.writeObject(this.endpointMetrics);
        out.writeObject(this.endpointParameters);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.httpMethod = (String)in.readObject();
        this.id = in.readLong();
        this.isPatternPath = in.readBoolean();
        this.methodSignature = (String)in.readObject();
        this.path = (String)in.readObject();
        this.ruleBanTimeInSeconds = in.readInt();
        this.ruleIpBased = in.readBoolean();
        this.rulePermanentBan = in.readBoolean();
        this.ruleRequestLimitCount = in.readInt();
        this.ruleStatus = (String)in.readObject();
        this.ruleTimeLimitInSeconds = in.readInt();
        this.endpointMetrics = in.readObject();
        this.endpointParameters = in.readObject();
    }

}
