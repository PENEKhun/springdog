/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.easypeelsecurity.springdog.domain.notification.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

/**
 * Class _NotificationHistory was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NotificationHistory extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Double> CONTENT = PropertyFactory.createNumeric("content", Double.class);
    public static final DateProperty<LocalDateTime> CREATED_AT = PropertyFactory.createDate("createdAt", LocalDateTime.class);
    public static final BaseProperty<Boolean> SENT_SUCCESSFULLY = PropertyFactory.createBase("sentSuccessfully", Boolean.class);
    public static final NumericProperty<Double> TITLE = PropertyFactory.createNumeric("title", Double.class);

    protected double content;
    protected LocalDateTime createdAt;
    protected boolean sentSuccessfully;
    protected double title;


    public void setContent(double content) {
        beforePropertyWrite("content", this.content, content);
        this.content = content;
    }

    public double getContent() {
        beforePropertyRead("content");
        return this.content;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        beforePropertyWrite("createdAt", this.createdAt, createdAt);
        this.createdAt = createdAt;
    }

    public LocalDateTime getCreatedAt() {
        beforePropertyRead("createdAt");
        return this.createdAt;
    }

    public void setSentSuccessfully(boolean sentSuccessfully) {
        beforePropertyWrite("sentSuccessfully", this.sentSuccessfully, sentSuccessfully);
        this.sentSuccessfully = sentSuccessfully;
    }

	public boolean isSentSuccessfully() {
        beforePropertyRead("sentSuccessfully");
        return this.sentSuccessfully;
    }

    public void setTitle(double title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public double getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "content":
                return this.content;
            case "createdAt":
                return this.createdAt;
            case "sentSuccessfully":
                return this.sentSuccessfully;
            case "title":
                return this.title;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "content":
                this.content = val == null ? 0 : (double)val;
                break;
            case "createdAt":
                this.createdAt = (LocalDateTime)val;
                break;
            case "sentSuccessfully":
                this.sentSuccessfully = val == null ? false : (boolean)val;
                break;
            case "title":
                this.title = val == null ? 0 : (double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeDouble(this.content);
        out.writeObject(this.createdAt);
        out.writeBoolean(this.sentSuccessfully);
        out.writeDouble(this.title);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.content = in.readDouble();
        this.createdAt = (LocalDateTime)in.readObject();
        this.sentSuccessfully = in.readBoolean();
        this.title = in.readDouble();
    }

}
