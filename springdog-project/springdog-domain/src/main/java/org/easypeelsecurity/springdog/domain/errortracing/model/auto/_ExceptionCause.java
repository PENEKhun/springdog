package org.easypeelsecurity.springdog.domain.errortracing.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.easypeelsecurity.springdog.domain.errortracing.model.ExceptionCause;

/**
 * Class _ExceptionCause was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ExceptionCause extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> CLASS_NAME = PropertyFactory.createString("className", String.class);
    public static final StringProperty<String> FILE_NAME = PropertyFactory.createString("fileName", String.class);
    public static final NumericProperty<Long> ID = PropertyFactory.createNumeric("id", Long.class);
    public static final NumericProperty<Integer> LINE = PropertyFactory.createNumeric("line", Integer.class);
    public static final StringProperty<String> MESSAGE = PropertyFactory.createString("message", String.class);
    public static final StringProperty<String> METHOD_NAME = PropertyFactory.createString("methodName", String.class);
    public static final NumericProperty<Long> PARENT_EXCEPTION_ID = PropertyFactory.createNumeric("parentExceptionId", Long.class);
    public static final DateProperty<LocalDateTime> TIMESTAMP = PropertyFactory.createDate("timestamp", LocalDateTime.class);
    public static final EntityProperty<ExceptionCause> NEXT_EXCEPTION = PropertyFactory.createEntity("nextException", ExceptionCause.class);

    protected String className;
    protected String fileName;
    protected long id;
    protected int line;
    protected String message;
    protected String methodName;
    protected Long parentExceptionId;
    protected LocalDateTime timestamp;

    protected Object nextException;

    public void setClassName(String className) {
        beforePropertyWrite("className", this.className, className);
        this.className = className;
    }

    public String getClassName() {
        beforePropertyRead("className");
        return this.className;
    }

    public void setFileName(String fileName) {
        beforePropertyWrite("fileName", this.fileName, fileName);
        this.fileName = fileName;
    }

    public String getFileName() {
        beforePropertyRead("fileName");
        return this.fileName;
    }

    public void setId(long id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public long getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLine(int line) {
        beforePropertyWrite("line", this.line, line);
        this.line = line;
    }

    public int getLine() {
        beforePropertyRead("line");
        return this.line;
    }

    public void setMessage(String message) {
        beforePropertyWrite("message", this.message, message);
        this.message = message;
    }

    public String getMessage() {
        beforePropertyRead("message");
        return this.message;
    }

    public void setMethodName(String methodName) {
        beforePropertyWrite("methodName", this.methodName, methodName);
        this.methodName = methodName;
    }

    public String getMethodName() {
        beforePropertyRead("methodName");
        return this.methodName;
    }

    public void setParentExceptionId(Long parentExceptionId) {
        beforePropertyWrite("parentExceptionId", this.parentExceptionId, parentExceptionId);
        this.parentExceptionId = parentExceptionId;
    }

    public Long getParentExceptionId() {
        beforePropertyRead("parentExceptionId");
        return this.parentExceptionId;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        beforePropertyWrite("timestamp", this.timestamp, timestamp);
        this.timestamp = timestamp;
    }

    public LocalDateTime getTimestamp() {
        beforePropertyRead("timestamp");
        return this.timestamp;
    }

    public void setNextException(ExceptionCause nextException) {
        setToOneTarget("nextException", nextException, true);
    }

    public ExceptionCause getNextException() {
        return (ExceptionCause)readProperty("nextException");
    }

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "className":
                return this.className;
            case "fileName":
                return this.fileName;
            case "id":
                return this.id;
            case "line":
                return this.line;
            case "message":
                return this.message;
            case "methodName":
                return this.methodName;
            case "parentExceptionId":
                return this.parentExceptionId;
            case "timestamp":
                return this.timestamp;
            case "nextException":
                return this.nextException;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "className":
                this.className = (String)val;
                break;
            case "fileName":
                this.fileName = (String)val;
                break;
            case "id":
                this.id = val == null ? 0 : (long)val;
                break;
            case "line":
                this.line = val == null ? 0 : (int)val;
                break;
            case "message":
                this.message = (String)val;
                break;
            case "methodName":
                this.methodName = (String)val;
                break;
            case "parentExceptionId":
                this.parentExceptionId = (Long)val;
                break;
            case "timestamp":
                this.timestamp = (LocalDateTime)val;
                break;
            case "nextException":
                this.nextException = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.className);
        out.writeObject(this.fileName);
        out.writeLong(this.id);
        out.writeInt(this.line);
        out.writeObject(this.message);
        out.writeObject(this.methodName);
        out.writeObject(this.parentExceptionId);
        out.writeObject(this.timestamp);
        out.writeObject(this.nextException);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.className = (String)in.readObject();
        this.fileName = (String)in.readObject();
        this.id = in.readLong();
        this.line = in.readInt();
        this.message = (String)in.readObject();
        this.methodName = (String)in.readObject();
        this.parentExceptionId = (Long)in.readObject();
        this.timestamp = (LocalDateTime)in.readObject();
        this.nextException = in.readObject();
    }

}
