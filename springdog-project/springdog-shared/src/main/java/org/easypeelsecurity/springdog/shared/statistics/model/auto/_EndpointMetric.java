/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.easypeelsecurity.springdog.shared.statistics.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.easypeelsecurity.springdog.shared.ratelimit.model.Endpoint;

/**
 * Class _EndpointMetric was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EndpointMetric extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> AVERAGE_RESPONSE_MS = PropertyFactory.createNumeric("averageResponseMs", Integer.class);
    public static final DateProperty<LocalDate> METRIC_DATE = PropertyFactory.createDate("metricDate", LocalDate.class);
    public static final NumericProperty<Long> PAGE_VIEW = PropertyFactory.createNumeric("pageView", Long.class);
    public static final EntityProperty<Endpoint> ENDPOINT = PropertyFactory.createEntity("endpoint", Endpoint.class);

    protected int averageResponseMs;
    protected LocalDate metricDate;
    protected long pageView;

    protected Object endpoint;

    public void setAverageResponseMs(int averageResponseMs) {
        beforePropertyWrite("averageResponseMs", this.averageResponseMs, averageResponseMs);
        this.averageResponseMs = averageResponseMs;
    }

    public int getAverageResponseMs() {
        beforePropertyRead("averageResponseMs");
        return this.averageResponseMs;
    }

    public void setMetricDate(LocalDate metricDate) {
        beforePropertyWrite("metricDate", this.metricDate, metricDate);
        this.metricDate = metricDate;
    }

    public LocalDate getMetricDate() {
        beforePropertyRead("metricDate");
        return this.metricDate;
    }

    public void setPageView(long pageView) {
        beforePropertyWrite("pageView", this.pageView, pageView);
        this.pageView = pageView;
    }

    public long getPageView() {
        beforePropertyRead("pageView");
        return this.pageView;
    }

    public void setEndpoint(Endpoint endpoint) {
        setToOneTarget("endpoint", endpoint, true);
    }

    public Endpoint getEndpoint() {
        return (Endpoint)readProperty("endpoint");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "averageResponseMs":
                return this.averageResponseMs;
            case "metricDate":
                return this.metricDate;
            case "pageView":
                return this.pageView;
            case "endpoint":
                return this.endpoint;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "averageResponseMs":
                this.averageResponseMs = val == null ? 0 : (int)val;
                break;
            case "metricDate":
                this.metricDate = (LocalDate)val;
                break;
            case "pageView":
                this.pageView = val == null ? 0 : (long)val;
                break;
            case "endpoint":
                this.endpoint = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.averageResponseMs);
        out.writeObject(this.metricDate);
        out.writeLong(this.pageView);
        out.writeObject(this.endpoint);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.averageResponseMs = in.readInt();
        this.metricDate = (LocalDate)in.readObject();
        this.pageView = in.readLong();
        this.endpoint = in.readObject();
    }

}
