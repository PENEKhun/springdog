package org.easypeelsecurity.springdog.shared.ratelimit.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.easypeelsecurity.springdog.shared.ratelimit.model.EndpointChangelog;

/**
 * Class _EndpointVersionControl was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EndpointVersionControl extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> DATE_OF_VERSION = PropertyFactory.createDate("dateOfVersion", LocalDateTime.class);
    public static final StringProperty<String> FULL_HASH_OF_ENDPOINTS = PropertyFactory.createString("fullHashOfEndpoints", String.class);
    public static final ListProperty<EndpointChangelog> ENDPOINTCHANGELOGS = PropertyFactory.createList("endpointchangelogs", EndpointChangelog.class);

    protected LocalDateTime dateOfVersion;
    protected String fullHashOfEndpoints;

    protected Object endpointchangelogs;

    public void setDateOfVersion(LocalDateTime dateOfVersion) {
        beforePropertyWrite("dateOfVersion", this.dateOfVersion, dateOfVersion);
        this.dateOfVersion = dateOfVersion;
    }

    public LocalDateTime getDateOfVersion() {
        beforePropertyRead("dateOfVersion");
        return this.dateOfVersion;
    }

    public void setFullHashOfEndpoints(String fullHashOfEndpoints) {
        beforePropertyWrite("fullHashOfEndpoints", this.fullHashOfEndpoints, fullHashOfEndpoints);
        this.fullHashOfEndpoints = fullHashOfEndpoints;
    }

    public String getFullHashOfEndpoints() {
        beforePropertyRead("fullHashOfEndpoints");
        return this.fullHashOfEndpoints;
    }

    public void addToEndpointchangelogs(EndpointChangelog obj) {
        addToManyTarget("endpointchangelogs", obj, true);
    }

    public void removeFromEndpointchangelogs(EndpointChangelog obj) {
        removeToManyTarget("endpointchangelogs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<EndpointChangelog> getEndpointchangelogs() {
        return (List<EndpointChangelog>)readProperty("endpointchangelogs");
    }

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateOfVersion":
                return this.dateOfVersion;
            case "fullHashOfEndpoints":
                return this.fullHashOfEndpoints;
            case "endpointchangelogs":
                return this.endpointchangelogs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateOfVersion":
                this.dateOfVersion = (LocalDateTime)val;
                break;
            case "fullHashOfEndpoints":
                this.fullHashOfEndpoints = (String)val;
                break;
            case "endpointchangelogs":
                this.endpointchangelogs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateOfVersion);
        out.writeObject(this.fullHashOfEndpoints);
        out.writeObject(this.endpointchangelogs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateOfVersion = (LocalDateTime)in.readObject();
        this.fullHashOfEndpoints = (String)in.readObject();
        this.endpointchangelogs = in.readObject();
    }

}
