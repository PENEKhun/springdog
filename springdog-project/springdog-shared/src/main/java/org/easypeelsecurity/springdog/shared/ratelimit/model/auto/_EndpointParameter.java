package org.easypeelsecurity.springdog.shared.ratelimit.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.easypeelsecurity.springdog.shared.ratelimit.model.Endpoint;

/**
 * Class _EndpointParameter was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EndpointParameter extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final BaseProperty<Boolean> ENABLED = PropertyFactory.createBase("enabled", Boolean.class);
    public static final StringProperty<String> HASH = PropertyFactory.createString("hash", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> TYPE = PropertyFactory.createString("type", String.class);
    public static final EntityProperty<Endpoint> ENDPOINT = PropertyFactory.createEntity("endpoint", Endpoint.class);
    public static final ListProperty<Endpoint> ENDPOINTS = PropertyFactory.createList("endpoints", Endpoint.class);

    protected boolean enabled;
    protected String hash;
    protected String name;
    protected String type;

    protected Object endpoint;
    protected Object endpoints;

    public void setEnabled(boolean enabled) {
        beforePropertyWrite("enabled", this.enabled, enabled);
        this.enabled = enabled;
    }

	public boolean isEnabled() {
        beforePropertyRead("enabled");
        return this.enabled;
    }

    public void setHash(String hash) {
        beforePropertyWrite("hash", this.hash, hash);
        this.hash = hash;
    }

    public String getHash() {
        beforePropertyRead("hash");
        return this.hash;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setEndpoint(Endpoint endpoint) {
        setToOneTarget("endpoint", endpoint, true);
    }

    public Endpoint getEndpoint() {
        return (Endpoint)readProperty("endpoint");
    }

    public void addToEndpoints(Endpoint obj) {
        addToManyTarget("endpoints", obj, true);
    }

    public void removeFromEndpoints(Endpoint obj) {
        removeToManyTarget("endpoints", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Endpoint> getEndpoints() {
        return (List<Endpoint>)readProperty("endpoints");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "enabled":
                return this.enabled;
            case "hash":
                return this.hash;
            case "name":
                return this.name;
            case "type":
                return this.type;
            case "endpoint":
                return this.endpoint;
            case "endpoints":
                return this.endpoints;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "enabled":
                this.enabled = val == null ? false : (boolean)val;
                break;
            case "hash":
                this.hash = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "endpoint":
                this.endpoint = val;
                break;
            case "endpoints":
                this.endpoints = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeBoolean(this.enabled);
        out.writeObject(this.hash);
        out.writeObject(this.name);
        out.writeObject(this.type);
        out.writeObject(this.endpoint);
        out.writeObject(this.endpoints);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.enabled = in.readBoolean();
        this.hash = (String)in.readObject();
        this.name = (String)in.readObject();
        this.type = (String)in.readObject();
        this.endpoint = in.readObject();
        this.endpoints = in.readObject();
    }

}
