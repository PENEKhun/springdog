package org.easypeelsecurity.springdog.shared.statistics.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

/**
 * Class _SystemMetric was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SystemMetric extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Double> CPU_USAGE_PERCENT = PropertyFactory.createNumeric("cpuUsagePercent", Double.class);
    public static final NumericProperty<Double> DISK_USAGE_PERCENT = PropertyFactory.createNumeric("diskUsagePercent", Double.class);
    public static final NumericProperty<Double> MEMORY_USAGE_PERCENT = PropertyFactory.createNumeric("memoryUsagePercent", Double.class);
    public static final DateProperty<LocalDateTime> TIMESTAMP = PropertyFactory.createDate("timestamp", LocalDateTime.class);

    protected double cpuUsagePercent;
    protected double diskUsagePercent;
    protected double memoryUsagePercent;
    protected LocalDateTime timestamp;


    public void setCpuUsagePercent(double cpuUsagePercent) {
        beforePropertyWrite("cpuUsagePercent", this.cpuUsagePercent, cpuUsagePercent);
        this.cpuUsagePercent = cpuUsagePercent;
    }

    public double getCpuUsagePercent() {
        beforePropertyRead("cpuUsagePercent");
        return this.cpuUsagePercent;
    }

    public void setDiskUsagePercent(double diskUsagePercent) {
        beforePropertyWrite("diskUsagePercent", this.diskUsagePercent, diskUsagePercent);
        this.diskUsagePercent = diskUsagePercent;
    }

    public double getDiskUsagePercent() {
        beforePropertyRead("diskUsagePercent");
        return this.diskUsagePercent;
    }

    public void setMemoryUsagePercent(double memoryUsagePercent) {
        beforePropertyWrite("memoryUsagePercent", this.memoryUsagePercent, memoryUsagePercent);
        this.memoryUsagePercent = memoryUsagePercent;
    }

    public double getMemoryUsagePercent() {
        beforePropertyRead("memoryUsagePercent");
        return this.memoryUsagePercent;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        beforePropertyWrite("timestamp", this.timestamp, timestamp);
        this.timestamp = timestamp;
    }

    public LocalDateTime getTimestamp() {
        beforePropertyRead("timestamp");
        return this.timestamp;
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cpuUsagePercent":
                return this.cpuUsagePercent;
            case "diskUsagePercent":
                return this.diskUsagePercent;
            case "memoryUsagePercent":
                return this.memoryUsagePercent;
            case "timestamp":
                return this.timestamp;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cpuUsagePercent":
                this.cpuUsagePercent = val == null ? 0 : (double)val;
                break;
            case "diskUsagePercent":
                this.diskUsagePercent = val == null ? 0 : (double)val;
                break;
            case "memoryUsagePercent":
                this.memoryUsagePercent = val == null ? 0 : (double)val;
                break;
            case "timestamp":
                this.timestamp = (LocalDateTime)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeDouble(this.cpuUsagePercent);
        out.writeDouble(this.diskUsagePercent);
        out.writeDouble(this.memoryUsagePercent);
        out.writeObject(this.timestamp);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cpuUsagePercent = in.readDouble();
        this.diskUsagePercent = in.readDouble();
        this.memoryUsagePercent = in.readDouble();
        this.timestamp = (LocalDateTime)in.readObject();
    }

}
